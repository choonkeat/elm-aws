module AWS.SQS exposing
    ( OutgoingMessage(..), Response(..), unsignedRequest
    , paramsForMessages, decodeResponse
    )

{-| Implementation of <https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-working-with-apis.html>

@docs OutgoingMessage, Response, unsignedRequest


## Tested internals

@docs paramsForMessages, decodeResponse

-}

import AWS
import AWS.DynamoDB
import AWS.Internal
import AWS.Types exposing (..)
import Base64
import Dict
import Http
import Json.Decode
import Json.Encode
import Platform exposing (Task)
import String exposing (toInt)
import Task
import Time
import Url
import Xml.Decode


{-| -}
type OutgoingMessage
    = StandardMessage
        { body : String
        , attributes : List { name : String, type_ : String, value : String }

        -- https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SendMessageBatchRequestEntry.html
        -- , id : String -- autogenerated since: "The Ids of a batch request need to be unique within a request."
        }
    | FifoMessage
        { body : String
        , attributes : List { name : String, type_ : String, value : String }
        , messageGroupId : String
        }


{-|

    expectedParams : List ( String, String )
    expectedParams =
        [ ("Action","SendMessageBatch")
        , ("SendMessageBatchRequestEntry.1.Id","1")
        , ("SendMessageBatchRequestEntry.1.MessageBody","alpha message")
        , ("SendMessageBatchRequestEntry.1.MessageGroupId","MessageGroup123")
        , ("SendMessageBatchRequestEntry.2.Id","2")
        , ("SendMessageBatchRequestEntry.2.MessageBody","beta message")
        ]

    paramsForMessages
        [ FifoMessage
            { body = "alpha message"
            , attributes = [ { name = "nameA", type_ = "typeA", value = "valueA" }]
            , messageGroupId = "MessageGroup123"
            }
        , StandardMessage
            { body = "beta message"
            , attributes = [ { name = "nameB", type_ = "typeB", value = "valueB" }]
            }
        ]
    --> expectedParams

-}
paramsForMessages : List OutgoingMessage -> List ( String, String )
paramsForMessages messages =
    let
        paramsFor index msg =
            let
                indexStr =
                    String.fromInt (index + 1)
            in
            case msg of
                StandardMessage { body } ->
                    [ ( "SendMessageBatchRequestEntry." ++ indexStr ++ ".Id", indexStr )
                    , ( "SendMessageBatchRequestEntry." ++ indexStr ++ ".MessageBody", body )
                    ]

                FifoMessage { body, messageGroupId } ->
                    [ ( "SendMessageBatchRequestEntry." ++ indexStr ++ ".Id", indexStr )
                    , ( "SendMessageBatchRequestEntry." ++ indexStr ++ ".MessageBody", body )
                    , ( "SendMessageBatchRequestEntry." ++ indexStr ++ ".MessageGroupId", messageGroupId )
                    ]
    in
    ( "Action", "SendMessageBatch" )
        :: List.concat (List.indexedMap paramsFor messages)


{-| Construct an `UnsignedRequest` for SQS <https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SendMessageBatch.html>, e.g.

    import Http
    import AWS.Types
    import Url

    queueUrl : Url.Url
    queueUrl =
        { protocol = Url.Https
        , host = "somequeue"
        , port_ = Nothing
        , path = "/123/queue.fifo"
        , query = Nothing
        , fragment = Nothing
        }

    unsignedResult : AWS.Types.UnsignedRequest Http.Error Response
    unsignedResult =
        unsignedRequest queueUrl
            [ StandardMessage
                { body = "alpha message"
                , attributes = [ { name = "nameA", type_ = "typeA", value = "valueA" }]
                }
            , FifoMessage
                { body = "beta message"
                , attributes = [ { name = "nameB", type_ = "typeB", value = "valueB" }]
                , messageGroupId = "messageGroupABC"
                }
            ]

    unsignedResult.method
    --> "POST"

    unsignedResult.headers
    --> [("Content-Type","application/x-www-form-urlencoded")]

    unsignedResult.stringBody
    --> "Action=SendMessageBatch&SendMessageBatchRequestEntry.1.Id=1&SendMessageBatchRequestEntry.1.MessageBody=alpha%20message&SendMessageBatchRequestEntry.2.Id=2&SendMessageBatchRequestEntry.2.MessageBody=beta%20message&SendMessageBatchRequestEntry.2.MessageGroupId=messageGroupABC"

    unsignedResult.service
    --> AWS.Types.ServiceSQS queueUrl


    usage config now unsignedResult =
        unsignedResult
            |> Result.andThen (AWS.signRequest config now)
            |> Result.map Http.task

-}
unsignedRequest : Url.Url -> List OutgoingMessage -> UnsignedRequest Http.Error Response
unsignedRequest queueUrl outgoingMessages =
    let
        toUnsignedRequest params =
            let
                stringBody =
                    params
                        |> List.map (\( k, v ) -> k ++ "=" ++ AWS.Internal.awsPercentEncode v)
                        |> String.join "&"
            in
            { method = "POST"
            , headers = [ ( "Content-Type", "application/x-www-form-urlencoded" ) ]
            , query = []
            , stringBody = stringBody
            , resolver = Http.stringResolver (AWS.Internal.decodeHttpResponse (Xml.Decode.decodeString decodeResponse) identity)
            , service = AWS.Types.ServiceSQS queueUrl
            }
    in
    paramsForMessages outgoingMessages
        |> toUnsignedRequest


{-| Response from SES API

See <https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-ses-api-responses.html>

-}
type Response
    = Error { type_ : String, code : String, message : String }
    | Success { messageIds : List String, requestId : String }


{-|

    import Xml.Decode

    --
    -- Success scenario
    """
    <SendMessageBatchResponse>
    <SendMessageBatchResult>
        <SendMessageBatchResultEntry>
            <Id>test_msg_001</Id>
            <MessageId>0a5231c7-8bff-4955-be2e-8dc7c50a25fa</MessageId>
            <MD5OfMessageBody>0e024d309850c78cba5eabbeff7cae71</MD5OfMessageBody>
        </SendMessageBatchResultEntry>
        <SendMessageBatchResultEntry>
            <Id>test_msg_002</Id>
            <MessageId>15ee1ed3-87e7-40c1-bdaa-2e49968ea7e9</MessageId>
            <MD5OfMessageBody>7fb8146a82f95e0af155278f406862c2</MD5OfMessageBody>
            <MD5OfMessageAttributes>295c5fa15a51aae6884d1d7c1d99ca50</MD5OfMessageAttributes>
        </SendMessageBatchResultEntry>
    </SendMessageBatchResult>
    <ResponseMetadata>
        <RequestId>ca1ad5d0-8271-408b-8d0f-1351bf547e74</RequestId>
    </ResponseMetadata>
    </SendMessageBatchResponse>
    """
    |> Xml.Decode.run decodeResponse
    --> Ok (Success { messageIds = ["test_msg_001","test_msg_002"], requestId = "ca1ad5d0-8271-408b-8d0f-1351bf547e74" })

    --
    -- Error scenario
    """
    <ErrorResponse>
       <Error>
          <Type>
             Sender
          </Type>
          <Code>
             ValidationError
          </Code>
          <Message>
             Value null at 'message.subject' failed to satisfy constraint: Member must not be null
          </Message>
       </Error>
       <RequestId>
          42d59b56-7407-4c4a-be0f-4c88daeea257
       </RequestId>
    </ErrorResponse>
    """
    |> Xml.Decode.run decodeResponse
    --> Ok (Error  { type_ = "Sender", code = "ValidationError", message = "Value null at 'message.subject' failed to satisfy constraint: Member must not be null" })

-}
decodeResponse : Xml.Decode.Decoder Response
decodeResponse =
    Xml.Decode.oneOf
        [ -- Error
          Xml.Decode.succeed (\type_ code message -> Error { type_ = type_, code = code, message = message })
            |> Xml.Decode.requiredPath [ "Error", "Type" ] (Xml.Decode.single (Xml.Decode.string |> Xml.Decode.map String.trim))
            |> Xml.Decode.requiredPath [ "Error", "Code" ] (Xml.Decode.single (Xml.Decode.string |> Xml.Decode.map String.trim))
            |> Xml.Decode.requiredPath [ "Error", "Message" ] (Xml.Decode.single (Xml.Decode.string |> Xml.Decode.map String.trim))

        -- SendMessageBatch
        , Xml.Decode.succeed (\messageIds requestId -> Success { messageIds = messageIds, requestId = requestId })
            |> Xml.Decode.requiredPath [ "SendMessageBatchResult", "SendMessageBatchResultEntry", "Id" ] (Xml.Decode.list Xml.Decode.string)
            |> Xml.Decode.requiredPath [ "ResponseMetadata", "RequestId" ] (Xml.Decode.single Xml.Decode.string)
        ]
